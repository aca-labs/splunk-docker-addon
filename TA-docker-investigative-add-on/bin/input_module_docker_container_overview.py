


# encoding = utf-8

import os
import sys
import time
import shlex
import datetime
import subprocess
import HTMLParser
import mako.template

from splunklib import modularinput as smi

'''
    This file is auto generated by Add-on Builder.
    Do not edit this file!!! It will be overwritten
    by Add-on Builder.
'''
def get_input_arguments():
    arguments = []
    arguments.append(smi.Argument("docker_api_version", title="Docker API version",
                                     description="e.g. v1.39",
                                     required_on_create=True,
                                     required_on_edit=False))
    return arguments

def validate_input(helper, definition):
    """overloaded splunklib modularinput method"""
    pass

def collect_events(helper, ew):
    """overloaded splunklib modularinput method"""
    # use simple rest call to load the events
    command = 'curl --unix-socket /var/run/docker.sock http:/${docker_api_version}/containers/json?all=1'
    input_name = helper.get_input_type()
    stanzas = helper.get_input_stanza()
    for stanza_name, stanza_params in stanzas.iteritems():
        # should unescape the xml text content
        hparser = HTMLParser.HTMLParser()
        input_params = {}
        for k, v in stanza_params.iteritems():
            input_params[k] = '' if v is None else hparser.unescape(str(v))
        stanza_params = input_params

        output_index = stanza_params['index']
        output_sourcetype = stanza_params['sourcetype']

        # parametrization for the command
        temp = mako.template.Template(command)
        translated_command = temp.render(**stanza_params)

        child = subprocess.Popen(translated_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        while child.poll() is None:
            content = child.stdout.read()
            if content:
                event = helper.new_event(source=input_name, index=output_index, data=content, unbroken=True, done=False)
                ew.write_event(event)
        # read the last part of events
        content = child.stdout.read()
        if content:
            event = smi.Event(source=input_name, index=output_index, sourcetype=output_sourcetype, data=content, unbroken=True, done=True)
            ew.write_event(event)
        if child.returncode != 0:
            err_prefix = "Command exit code is {}. Fail to run command '{}'.".format(child.returncode, translated_command)
            errmsg = child.stderr.read()
            if errmsg:
                errmsg = err_prefix + "error messag:" + errmsg
            else:
                errmsg = err_prefix
            raise RuntimeError(errmsg)
